{
  "name": "Trading Office",
  "tagline": "Microservices reference app",
  "body": "# Trading Office [![Build Status](https://travis-ci.org/spolnik/trading-office.svg?branch=master)](https://travis-ci.org/spolnik/trading-office)\r\n\r\nTrading Office is reference implementation of microservices architecture, based on Spring Boot, Heroku, RabbitMQ, MongoDB and Spring Cloud Netflix components. \r\n\r\nIt's modeling part of post trade processing, mainly focused on receiving Fixml message and preparing confirmation for it.\r\n\r\n- [Introduction](#introduction)\r\n- [Components](#components)\r\n- [E2E Test](#e2e-test)\r\n- [Continuous Delivery](#continuous-delivery)\r\n- [Infrastructure](#infrastructure)\r\n- [Notes](#notes)\r\n\r\n## Introduction\r\n\r\n- set of applications simulating simple flow in post trade part of trade lifecycle\r\n- it's focused on generating confirmation based on received allocation report\r\n- [Running locally](https://github.com/spolnik/trading-office/wiki)\r\n\r\n![Component Diagram](https://raw.githubusercontent.com/spolnik/trading-office/master/design/component_diagram.png)\r\n\r\n## Components\r\n- [Allocation Message Receiver](https://github.com/spolnik/trading-office-allocation-message-receiver)\r\n- [Allocation Enricher](https://github.com/spolnik/trading-office-allocation-enricher)\r\n- [Confirmation Sender](https://github.com/spolnik/trading-office-confirmation-sender)\r\n- [Market Data Service](https://github.com/spolnik/trading-office-market-data-service)\r\n- [Confirmation Service](https://github.com/spolnik/trading-office-confirmation-service)\r\n- [Counterparty Service](https://github.com/spolnik/trading-office-counterparty-service)\r\n- [Eureka Server](https://github.com/spolnik/trading-office-eureka-server)\r\n- [API Gateway](https://github.com/spolnik/trading-office-api-gateway)\r\n\r\n## E2E Test\r\n- end to end tests written in spock\r\n- it runs against deployed applications (Heroku)\r\n- it covers 4 cases, 2 for PROD and 2 for STAGING. Those 2 cases are: SWIFT and EMAIL confirmations\r\n\r\n## Continuous Delivery\r\n\r\n- initially, developer push his changes to GitHub\r\n- in next stage, GitHub notifies Travis CI about changes\r\n- Travis CI runs whole continuous integration flow, running compilation, tests and generating reports\r\n- static code analysis report is sent to SonarQube\r\n- coverage report is sent to Codecov\r\n- application is deployed into Heroku Staging machine\r\n- administrator once he is happy with quality of staging application, he promotes it to production\r\n\r\n![Continuous Delivery Diagram](https://raw.githubusercontent.com/spolnik/trading-office/master/design/continuous_delivery.png)\r\n\r\n=========\r\n\r\n## Infrastructure\r\n- Heroku (hosting microservices)\r\n- Heroku Add-ons (monitoring - new relic)\r\n- RabbitMQ (CloudAMQP hosted on heroku)\r\n- SonarQube (hosted on OpenShift) - https://sonar-nprogramming.rhcloud.com\r\n- TravisCI - https://travis-ci.org/spolnik/trading-office\r\n\r\n## Domain\r\n\r\n- Swift - http://www.iso15022.org/uhb/uhb/finmt518.htm\r\n- FIXML - http://btobits.com/fixopaedia/fixdic50-sp2-ep/index.html (Allocation Report message)\r\n- Trade Lifecycle - http://thisweekfinance.blogspot.com/2011/10/trade-life-cycle.html\r\n\r\n![Trade Lifecycle](https://raw.githubusercontent.com/spolnik/trading-office/master/design/trade_lifecycle.jpg)\r\n\r\n## Notes\r\n- to run integration tests, you have to have both tools up and running - rabbitmq & mongodb\r\n- [Running locally](https://github.com/spolnik/trading-office/wiki)\r\n- [Travis Builds](https://travis-ci.org/spolnik)\r\n- central log management - [managed ELK on sematext](https://apps.sematext.com/users-web/index.do)\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}