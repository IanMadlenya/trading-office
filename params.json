{"name":"Trading-office","tagline":"Trading Office","body":"[![Build Status](https://travis-ci.org/spolnik/trading-office.svg?branch=master)](https://travis-ci.org/spolnik/trading-office) [![codecov.io](https://codecov.io/github/spolnik/trading-office/coverage.svg?branch=master)](https://codecov.io/github/spolnik/trading-office?branch=master) [![Sonar Coverage](https://img.shields.io/sonar/https/sonar-nprogramming.rhcloud.com/trading-office/coverage.svg)](https://sonar-nprogramming.rhcloud.com/dashboard/index/1) [![Sonar Tech Debt](https://img.shields.io/sonar/https/sonar-nprogramming.rhcloud.com/trading-office/tech_debt.svg)](https://sonar-nprogramming.rhcloud.com/dashboard/index/1) [![Coverity Scan Build Status](https://scan.coverity.com/projects/7604/badge.svg)](https://scan.coverity.com/projects/spolnik-trading-office)\r\n\r\n# Trading Office\r\n- set of applications simulating simple flow in post trade part of trade lifecycle\r\n- it's focused on generating confirmation based on received allocation report\r\n\r\n## Allocation Message Translator\r\n- spring boot application\r\n- subscribes to jms looking for new allocation report messages (fixml)\r\n- after receiving message it parses it to AllocationReport POJO\r\n- finally, it sends the POJO as json into ActiveMQ\r\n- deployment to heroku\r\n\r\n## Allocation Enricher\r\n- spring boot application\r\n- subscribes to jms looking for tranlated allocation report messages (json)\r\n- after receiving message, it enriches it with instrument data (using Intrument Service, and Finance Data Service)\r\n- finally, it sends enriched allocation as json into ActiveMQ\r\n- deployment to heroku\r\n\r\n## Instrument Service\r\n- spring boot web application\r\n- exposes REST endpoints for instrument data\r\n- works in readonly mode\r\n- data consumed from instruments.json file\r\n- deployment to heroku\r\n\r\n## Finance Data Service\r\n- spring boot web application\r\n- exposes REST endpoint for financial data (using Yahoo Finance Api)\r\n- based on a given symbol, downloads instrument data with actual price\r\n- works in readonly mode\r\n- deployment to heroku\r\n\r\n## Confirmation Sender\r\n- spring boot application\r\n- subscribes to jms looking for enriched allocation report messages (json)\r\n- after receiving message, it generates PDF confirmation using JasperReports template\r\n- finally, it sends the Confirmation POJO with attached PDF (as byte[]) to confirmation service (REST Service)\r\n- deployment to heroku\r\n\r\n## Confirmation Service\r\n- spring boot web application (rest service)\r\n- exposes REST endpoint api to store and retrieve confirmations\r\n- data stored as files\r\n- deployment to heroku\r\n\r\n## Trading Domain\r\n- library, containing all domain specific entities\r\n\r\n## E2E Test\r\n- end to end tests written in spock\r\n- it runs against deployed applications (Heroku, all above + OpenShift, ActiveMq)\r\n\r\n## ActiveMQ\r\n- OpenShift hosted ActiveMQ 5.13\r\n\r\n=========\r\n\r\n# Technologies used\r\n\r\n## Infrastructure\r\n- Heroku\r\n- Openshift\r\n- Heroku Add-ins (logging, monitoring)\r\n- TravisCI\r\n- SonarQube (hosted on openshift)\r\n- Coverity (Static code analysis)\r\n\r\n#Notes\r\n- to have access to OpenShift activemq web console - run rhc port-forward activemq (only if you have admin access)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}