{"name":"Trading Office","tagline":"Microservices reference app","body":"# Trading Office [![Build Status](https://travis-ci.org/spolnik/trading-office.svg?branch=master)](https://travis-ci.org/spolnik/trading-office) [![codecov.io](https://codecov.io/github/spolnik/trading-office/coverage.svg?branch=master)](https://codecov.io/github/spolnik/trading-office?branch=master) [![Sonar Coverage](https://img.shields.io/sonar/https/sonar-nprogramming.rhcloud.com/trading-office/coverage.svg)](https://sonar-nprogramming.rhcloud.com/dashboard/index/1) [![Sonar Tech Debt](https://img.shields.io/sonar/https/sonar-nprogramming.rhcloud.com/trading-office/tech_debt.svg)](https://sonar-nprogramming.rhcloud.com/dashboard/index/1) [![Coverity Scan Build Status](https://scan.coverity.com/projects/7604/badge.svg)](https://scan.coverity.com/projects/spolnik-trading-office)\r\n\r\nTrading Office is reference implementation of microservices architecture, based on Spring Boot. It's modeling part of post trade processing, mainly focused on receiving Fixml message and preparing confirmation for it.\r\n\r\n- [Introduction](#introduction)\r\n- [Allocation Message Receiver](#allocation-message-receiver)\r\n- [Allocation Enricher](#allocation-enricher)\r\n- [Confirmation Sender](#confirmation-sender)\r\n- [Market Data Service](#market-data-service)\r\n- [Confirmation Service](#confirmation-service)\r\n- [Counterparty Service](#counterparty-service)\r\n- [E2E Test](#e2e-test)\r\n- [Infrastructure](#infrastructure)\r\n- [Notes](#notes)\r\n\r\n## Introduction\r\n\r\n- set of applications simulating simple flow in post trade part of trade lifecycle\r\n- it's focused on generating confirmation based on received allocation report\r\n\r\n![Component Diagram](https://raw.githubusercontent.com/spolnik/trading-office/master/design/component_diagram.png)\r\n\r\n## Allocation Message Receiver\r\n- spring boot application\r\n- subscribes to jms looking for new allocation report messages (fixml)\r\n- after receiving message it parses it to AllocationReport POJO\r\n- finally, it sends the POJO as json into ActiveMQ\r\n\r\nHeroku: http://allocation-message-receiver.herokuapp.com/swagger-ui.html\r\n\r\n![Component Diagram](https://raw.githubusercontent.com/spolnik/trading-office/master/design/allocation_message_receiver.png)\r\n\r\n## Allocation Enricher\r\n- spring boot application\r\n- subscribes to jms looking for translated allocation report messages (json)\r\n- after receiving message, it enriches it with instrument data and then with counterparty data\r\n- finally, it sends enriched allocation as json into ActiveMQ\r\n\r\nHeroku: http://allocation-enricher.herokuapp.com/health\r\n\r\n![Component Diagram](https://raw.githubusercontent.com/spolnik/trading-office/master/design/allocation_enricher.png)\r\n\r\n## Confirmation Sender\r\n- spring boot application\r\n- subscribes to jms looking for enriched allocation report messages (json)\r\n- after receiving message, it generates PDF confirmation using JasperReports template\r\n- finally, it sends the Confirmation POJO with attached PDF (as byte[]) to confirmation service (REST Service)\r\n\r\nHeroku: http://confirmation-sender.herokuapp.com/health\r\n\r\n![Component Diagram](https://raw.githubusercontent.com/spolnik/trading-office/master/design/confirmation_sender.png)\r\n\r\n## Market Data Service\r\n- spring boot web application\r\n- exposes REST endpoint for market data (using Yahoo Finance Api)\r\n- exposes REST endpoints for instrument data (data consumed from [OpenFigi Api](https://openfigi.com/api))\r\n- based on a given symbol, downloads instrument data with actual price\r\n- works in readonly mode\r\n\r\nHeroku: http://market-data-service.herokuapp.com/swagger-ui.html\r\n\r\n![Component Diagram](https://raw.githubusercontent.com/spolnik/trading-office/master/design/market_data_service.png)\r\n\r\n## Confirmation Service\r\n- spring boot web application (rest service)\r\n- exposes REST endpoint api to store and retrieve confirmations\r\n- data stored as files\r\n\r\nHeroku: http://confirmation-service.herokuapp.com/swagger-ui.html\r\n\r\n![Component Diagram](https://raw.githubusercontent.com/spolnik/trading-office/master/design/confirmation_service.png)\r\n\r\n## Counterparty Service\r\n- spring boot web application (rest service)\r\n- exposes REST endpoint to query Exchange data based on mic code\r\n- exposes REST endpoint to query Party data based on custom id\r\n\r\nHeroku: http://counterparty-service.herokuapp.com/swagger-ui.html\r\n\r\n![Component Diagram](https://raw.githubusercontent.com/spolnik/trading-office/master/design/counterparty_service.png)\r\n\r\n## E2E Test\r\n- end to end tests written in spock\r\n- it runs against deployed applications (Heroku, all above + OpenShift, ActiveMq)\r\n\r\n=========\r\n\r\n## Infrastructure\r\n- Heroku (hosting microservices)\r\n- Heroku Add-ons (logging - papertrial, monitoring - new relic)\r\n- ActiveMQ (hosted on OpenShift)\r\n- SonarQube (hosted on OpenShift) - https://sonar-nprogramming.rhcloud.com\r\n- TravisCI - https://travis-ci.org/spolnik/trading-office\r\n- Coverity (Static code analysis) - https://scan.coverity.com/projects/spolnik-trading-office\r\n\r\n## Domain\r\n\r\n- Swift - http://www.iso15022.org/uhb/uhb/finmt518.htm\r\n- FIXML - http://btobits.com/fixopaedia/fixdic50-sp2-ep/index.html (Allocation Report message)\r\n- Trade Lifecycle - http://thisweekfinance.blogspot.com/2011/10/trade-life-cycle.html\r\n\r\n![Trade Lifecycle](https://raw.githubusercontent.com/spolnik/trading-office/master/design/trade_lifecycle.jpg)\r\n\r\n## Notes\r\n- to have access to OpenShift activemq web console - run rhc port-forward activemq (only if you have admin access)\r\n- checking if [dependencies are up to date](https://www.versioneye.com/user/projects/56ad39427e03c7003ba41427)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}